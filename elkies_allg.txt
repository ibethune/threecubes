#####################################################################
# file elkies_allg.doc
# Authors: Andreas-Stephan Elsenhans and Joerg Jahnel
#   Email: elsenhan@uni-math.gwdg.de, jahnel@uni-math.gwdg.de
#   Web:   http://www.gwdg.de/jahnel
# Date: 2007-12-03
#####################################################################

BE ALERT: This package ASSUMES that a "long int" is a 64-bit integer.
          On 32-bit machines it is highly unlikely to run properly.


HOW TO USE IT:

1. Edit the three numbers UPPER_BOUND, LOWER_BOUND (lower bound), and
MAX_K (upper bound) in the file elkies_allg.c.
2. Start something like
       elkies_allg 0.00003 0.794 .

This causes Elkies' method to be performed over the interval 0.00003..0.794.
You might want to do this on several machines and break the interval
0.00003..0.794 into pieces.

Then, all solutions of
       x**3 + y**3 = z**3 + k
will be found for 0 < k < MAX_K which are of at least
LOWER_BOUND and at most UPPER_BOUND.
(Actually, some but not all smaller solutions will also be found and many solutions will be found more than once.)

The upper bound (0.794) should be close to 0.5**(1/3) but above that number.
The lower bound should be near zero but bigger than (3/UPPER_BOUND)**(1/3).


SOME DOCUMENTATION (translated from German by IainB):

Search for solutions to
       x**3 + y**3 = z**3 + k
for small k

This code is an implementation of Elkies' Method.

This works as follows:
x_0 runs from 0 (actually about 1.0e-5) to 1/\sqrt[3]{2} in steps of size
2*halbe_schrittweite. (half_step)

The current interval is:
       [x_0 - halbe_schrittweite, x_0 + halbe_schrittweite].
We consider a parallelogram, the "tile", which contains 
the curve y = (1 - x**3)**(1/3) in this interval


The half tile-width is:
       y''(\xi) * halbe_schrittweite**2 / 4
Where \xi lies in the range:
       \xi \in [x_0 - halbe_schrittweite, x_0 + halbe_schrittweite].
Adding a little margin, the half tile-width is 
       halbe_fliesenbreite :=  1.001 * y''(x_0) * halbe_schrittweite**2 / 4
                             + zusatzsummand (extra)
Something gets renews every FLIESE_NEU tiles (unclear, original German is)
an und erneuern die Rechnung alle FLIESE_NEU Fliesen.

The extra allows points that lie close to the curve such that
       x**3 + y**3 = z**3 \pm k
provided that
       Y**3 = 1 - X**3 \pm k/z**3
with Y := y/z and X := x/z.
Thus
       Y = sqrt[3]{1 - X**3} \pm k/z**3 * Y'(1 - X**3).
|Y'| has an upper bound of 1.  Thus the distance of the a point from the curve 
is at most
       k/z**3.
We take zusatzsummand := 1.0e-30. This should guarantee that all
solutions of size >10**11 for k < 1000 are found.

The upper and lower sides of the parallelogram have slope y'(x_0).
The curve y = (1 - x**3)**(1/3) always lies below this tangent
We set the tile offset
       fliesenversatz := y''(x_0) * halbe_schrittweite**2 / 4
And choose
       y = Ax + B
as the center-line of the tile, where A is defined as := y'(x_0) and B is given by
       y (x_0) = A*x_0 + B + fliesenversatz

If x**3 + y**3 = z**3 + k and since x, y und z are not too small
(x/z, y/z) are very close to the curve y = (1 - x**3)**(1/3).
That means (x/z, y/z)  occurs once in the loop over x_0 within a tile. */ /*

We search for rational points within a tile with |z| < UPPER_BOUND.
(x/z, y/z) lies in the tile exactly when
       |x/z - x_0| < halbe_schrittweite (half-step)
and
       |y/z - A*x/z - B| < halbe_fliesenbreite (half-tilewidth)
hold.

This implies
(1)    |z / UPPER_BOUND| < 1
and (relaxed slightly)
       |x - x_0 * z| < halbe_schrittweite * z < halbe_schrittweite * UPPER_BOUND,
also
(2)    |(x - x_0 * z) / (halbe_schrittweite * UPPER_BOUND)| < 1
as well as (also relaxed)
       |y - A*x - B*z| < halbe_fliesenbreite * z
                       < halbe_fliesenbreite * UPPER_BOUND,
also
(3)    |(y - A*x - B*z) / (halbe_fliesenbreite * UPPER_BOUND)| < 1.

We this have three linear forms l1, l2 and l3, each of which is less than 1.

We want to find solutions with z>0.
This means
        0 < l1 < 1.
(There are no solutions with z=0, so we may also write l1 \neq 0.
The other two conditions are more precise:
     |l2| < l1
and
     |l3| < l1.
This defines a pyramid with corners:
      (l1,l2,l3) = (0,0,0), (1,1,1), (1,1,-1), (1,-1,1) und (1,-1,-1).
Only grid-points inside this pyramid are really needed.

We begin with an LLL-reduction of the standard lattice with the scalar product:
        q := l1**2 + l2**2 + l3**2
Then we naively search for points inside the pyramid.

In reality, we run backwards through the interval [0, 1/sqrt[3]{2}].
The reason is that the curvature of y = (1 - x**3)**(1/3) is monotonic 
Therefore, the tile width must always be calculated at the end of the interval.

We use 128-bit fixed-point arithmetic.

The calculation of y'(x_0) now uses Newton iteration instead of the more
expensive mpf-division.

